# Latest Ansible package version
ansible_pkg:
  announce: Ansible 7 is now available
  pip_install: pip install ansible
# Base docsite page names
site:
  index: index.html
  user: user.html
  developer: developer.html
  maintainer: maintainer.html
  collections: collections.html
  community: community.html
  core: core.html
  ecosystem: ecosystem.html
# Content for the index page
index:
  title: Ansible community documentation
  intro: Ansible offers powerful and flexible automation that is simple, decentralized, and easy.
  novice_heading: Get started with Ansible
  # Ansible user
  user_heading: Using Ansible
  user_body: Ansible playbooks are blueprints for automating software deployment and system configuration as well as orchestrating complex operations.
  user_resources_heading: User resources
  user_resources_body: Structure your project with roles, improve content quality, re-use existing automation, and more.
  user_resources_action: Find more resources for using Ansible
  # Ansible developer
  developer_heading: Ansible developers
  developer_body: Ansible is open source. You can add code that fixes bugs, implements new features, or extends the benefits of simple, agentless automation.
  developer_resources_heading: Developer resources
  developer_resources_body: Contribute to an Ansible project or collection, run sanity tests, write integration and unit tests, and more.
  developer_resources_action: Find more resources for developing with Ansible
  # Community maintainer
  maintainer_heading: Community maintainers
  maintainer_body: Ansible maintainers are responsible for the ongoing quality of  Ansible projects and collections and play a vital role in guiding the direction of the wider community.
  maintainer_resources_heading: Community maintainer resources
  maintainer_resources_body: Handle project lifecycles, ensure the health of collections, join the Ansible steering committee, and more.
  maintainer_resources_action: Find more resources for Ansible community maintainers
# Actions for novice journeys
novice:
  learn: Understand the fundamentals of Ansible automation
  install: Install the Ansible package
  start: Write your first playbook in a few easy steps
# Actions for user journeys
user:
  title: User resources
  intro: Automate the management of remote systems and control their desired state.
  milestone:
    automate: Create automation
    build_inventory: Build inventories
    organize: Organize automation projects
    tooling: Use Ansible tooling
    find: Find automation content
    share: Share automation content
    awx: Schedule and run automation jobs
    executor: Embed automation in systems
  automate:
    intro: Write playbooks and develop content that automates complex tasks.
    start: Start writing Ansible playbooks
    evaluate_plugins: Learn which plugins to use for your tasks
  build_inventory:
    intro: Build inventories that list and describe your infrastructure.
    multiple_hosts: Build inventory files to manage multiple hosts
    dynamic: Use dynamic inventories
  organize:
    intro: Organize your automation project as it grows.
    roles: Use roles to structure the automation project
  tooling:
    intro: Validate and improve your project for consistent, trusted automation.
    lint: Use Ansible Lint to validate playbooks
    molecule: Install Molecule to develop and test Ansible roles
    navigator: Create and test playbooks with Ansible Navigator
    vscode: Use Ansible with Visual Studio Code and OpenVSX compatible editors
  find:
    intro: Discover and use existing automation content.
    explore_galaxy: Start exploring Ansible Galaxy
    install_roles: Install and use roles
    install_collections: Install and use collections
    customize_content: Customize automation content
  share:
    intro: Share your automation content with others.
    submit_roles: Submit roles to an existing collection
    create_collection: Create a new collection
    upload_collection: Upload a collection to Ansible Galaxy
  awx:
    intro: Use AWX for more convenient automation.
    on_demand_jobs: Execute automation jobs on demand
    schedule_jobs: Schedule automation jobs
    create_job_templates: Create AWX job templates
  executor:
    intro: Invoke automation jobs from other systems.
    build_ees: Build execution environment with specific dependencies
    use_ees: Use execution environments with AWX jobs
# Actions for developer journeys
developer:
  title: Developer resources
  intro: Extend automation with custom Ansible modules, add functionality to existing modules, or fix bugs to improve existing code.
  milestone:
    start: Start writing code
    contribute: Contribute code to an Ansible project
    test: Test plugins and modules
    create_collection: Create new collections
  start:
    intro: Ready to start writing code for Ansible? Follow these steps to get started.
    setup: Set up your development environment
    conduct: Review the Ansible contributor guidelines
    learn: Understand the Ansible architecture
    code: Write custom modules or plugins
  contribute:
    intro: Contribute your code to an Ansible project or collection.
    checklist: Contribute your module to an existing collection
    lifecycle: Review the lifecycle of an Ansible module or plugin
    review: Review issues and PRs in an Ansible project
    fix: Fix issues and implement new features in an Ansible project, collection, or module
  test:
    intro: Test Ansible to help fix bugs and enforce coding standards and requirements.
    learn: Understand testing in Ansible
    run: Run sanity tests
    integration: Write integration tests
    unit: Write unit tests
  create_collection:
    intro: Create a new collection that distributes Ansible content for specific use cases.
    skeleton: Set things up with the collection skeleton
    test: Test your collection for code quality
    distribute: Publish your collection on a distribution server
    gh_actions: Use GitHub actions to set up testing workflows
    troubleshoot: Troubleshoot collections with ansible-navigator
    request_inclusion: Request a collection be added to the Ansible package
# Actions for community maintainer journeys
maintainer:
  title: Ansible community maintainers
  intro: Community maintainers are trusted contributors who oversee project lifecycle and overall health.
  milestone:
    learn: Learn about community maintainer responsibilities
    build_community: Expand community around a collection
    collection_inclusion: Get collections included in the Ansible package
    participate: Participate in cross-project governance
  learn:
    intro: Interested in becoming a community maintainer? Find out what's involved.
    guidelines: Review community maintainer responsibilities
    backports: Backport merged pull requests to stable branches
    release: Regularly release stable versions
    documentation: Look after collection documentation
  build_community:
    intro: Community maintainers play a special role to enable and encourage contributors.
    communication: Join or start a community discussion
    contributor_paths: Understand Ansible contributor paths
    encourage: Attract and mentor new contributors
  collection_inclusion:
    intro: Satisfy requirements to get collections included in the Ansible package.
    process: Understand the inclusion process
    review: Go through inclusion review cycles
  participate:
    intro: Get involved in higher-level decision processes that guide the broader community.
    join: Join the Ansible steering committee
# Ansible ecosystem
ecosystem:
  title: Ansible Ecosystem
  intro: Projects in the Ansible ecosystem let you expand automation to a virtually unlimited set of use cases.
# Labels provide meaningful descriptions of elements for accessibility purposes.
labels:
  button_group: Button group that links to Ansible community documentation.
